/* ==========================================================================
   Stay Hi â€” Premium Calendar Modal System
   Tesla-style calendar popup for tracking Hi Moments
   ========================================================================== */

class PremiumCalendar {
  constructor() {
    this.currentMonth = new Date();
    this.hiMoments = {}; // Will load from localStorage/Supabase
    this.isOpen = false;
    this.init();
  }

  init() {
    this.createCalendarModal();
    this.loadHiMoments();
    this.setupEventListeners();
    console.log('ðŸ“… Premium Calendar initialized');
  }

  createCalendarModal() {
    // Remove existing modal if it exists
    const existing = document.querySelector('.premium-calendar-modal');
    if (existing) existing.remove();

    const modal = document.createElement('div');
    modal.className = 'premium-calendar-modal';
    modal.innerHTML = `
      <div class="calendar-backdrop"></div>
      <div class="calendar-container glass-card">
        <div class="calendar-header">
          <button class="calendar-nav-btn" id="calPrevBtn" aria-label="Previous month">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polyline points="15,18 9,12 15,6"></polyline>
            </svg>
          </button>
          <h2 class="calendar-title text-gradient" id="calTitle">October 2025</h2>
          <div class="calendar-nav-controls">
            <button class="calendar-nav-btn" id="calNextBtn" aria-label="Next month">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="9,18 15,12 9,6"></polyline>
              </svg>
            </button>
          </div>
        </div>
        <button class="calendar-close-btn" id="calCloseBtn" aria-label="Close calendar">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
        
        <div class="calendar-stats">
          <div class="stat-pill">
            <span class="stat-number" id="monthCompleted">0</span>
            <span class="stat-label">Days</span>
          </div>
          <div class="stat-pill">
            <span class="stat-number" id="currentStreak">0</span>
            <span class="stat-label">ðŸ”¥ Streak</span>
          </div>
          <div class="stat-pill">
            <span class="stat-number" id="todayCount">0</span>
            <span class="stat-label">Today</span>
          </div>
        </div>

        <div class="calendar-grid">
          <div class="calendar-weekdays">
            <div class="weekday">S</div>
            <div class="weekday">M</div>
            <div class="weekday">T</div>
            <div class="weekday">W</div>
            <div class="weekday">T</div>
            <div class="weekday">F</div>
            <div class="weekday">S</div>
          </div>
          <div class="calendar-days" id="calendarDays">
            <!-- Days will be generated by JavaScript -->
          </div>
        </div>
      </div>
    `;

    document.body.appendChild(modal);
  }

  setupEventListeners() {
    // Listen for calendar open event from header
    window.addEventListener('open-calendar', () => this.show());

    // Modal event listeners
    document.addEventListener('click', (e) => {
      if (e.target.matches('#calCloseBtn, .calendar-backdrop')) {
        this.hide();
      }
      if (e.target.matches('#calPrevBtn')) {
        this.previousMonth();
      }
      if (e.target.matches('#calNextBtn')) {
        this.nextMonth();
      }
    });

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (!this.isOpen) return;
      
      if (e.key === 'Escape') {
        this.hide();
      }
      if (e.key === 'ArrowLeft') {
        this.previousMonth();
      }
      if (e.key === 'ArrowRight') {
        this.nextMonth();
      }
    });
  }

  show() {
    const modal = document.querySelector('.premium-calendar-modal');
    if (!modal) return;

    this.isOpen = true;
    modal.classList.add('show');
    this.updateCalendar();
    
    // Premium entrance animation
    if (window.PremiumUX) {
      window.PremiumUX.triggerHapticFeedback('light');
    }

    // Focus management for accessibility
    const firstFocusable = modal.querySelector('#calPrevBtn');
    firstFocusable?.focus();
  }

  hide() {
    const modal = document.querySelector('.premium-calendar-modal');
    if (!modal) return;

    this.isOpen = false;
    modal.classList.remove('show');
    
    // Premium exit animation
    if (window.PremiumUX) {
      window.PremiumUX.triggerHapticFeedback('light');
    }
  }

  previousMonth() {
    this.currentMonth.setMonth(this.currentMonth.getMonth() - 1);
    this.updateCalendar();
    
    if (window.PremiumUX) {
      window.PremiumUX.triggerHapticFeedback('light');
    }
  }

  nextMonth() {
    this.currentMonth.setMonth(this.currentMonth.getMonth() + 1);
    this.updateCalendar();
    
    if (window.PremiumUX) {
      window.PremiumUX.triggerHapticFeedback('light');
    }
  }

  updateCalendar() {
    this.updateTitle();
    this.updateStats();
    this.renderCalendarGrid();
  }

  updateTitle() {
    const title = document.getElementById('calTitle');
    if (title) {
      const monthNames = [
        'January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'
      ];
      title.textContent = `${monthNames[this.currentMonth.getMonth()]} ${this.currentMonth.getFullYear()}`;
    }
  }

  updateStats() {
    const monthKey = this.getMonthKey(this.currentMonth);
    const monthData = this.hiMoments[monthKey] || {};
    const completedDays = Object.keys(monthData).length;
    
    // Calculate streak
    const streak = this.calculateStreak();
    
    // Today's count
    const today = this.getTodayKey();
    const todayCount = monthData[today] || 0;

    // Update stats with Tesla-style animations
    const monthEl = document.getElementById('monthCompleted');
    const streakEl = document.getElementById('currentStreak');
    const todayEl = document.getElementById('todayCount');
    
    if (monthEl) {
      this.animateNumber(monthEl, completedDays);
      monthEl.parentElement.classList.toggle('streak-stat', false);
    }
    
    if (streakEl) {
      this.animateNumber(streakEl, streak);
      streakEl.parentElement.classList.toggle('streak-stat', streak > 0);
    }
    
    if (todayEl) {
      this.animateNumber(todayEl, todayCount);
    }
  }

  animateNumber(element, targetValue) {
    const currentValue = parseInt(element.textContent) || 0;
    if (currentValue === targetValue) return;
    
    const duration = 600;
    const startTime = Date.now();
    const difference = targetValue - currentValue;
    
    const animate = () => {
      const elapsed = Date.now() - startTime;
      const progress = Math.min(elapsed / duration, 1);
      const easeProgress = 1 - Math.pow(1 - progress, 3); // ease-out cubic
      
      const current = Math.round(currentValue + (difference * easeProgress));
      element.textContent = current;
      
      if (progress < 1) {
        requestAnimationFrame(animate);
      }
    };
    
    requestAnimationFrame(animate);
  }

  renderCalendarGrid() {
    const daysContainer = document.getElementById('calendarDays');
    if (!daysContainer) return;

    daysContainer.innerHTML = '';

    const year = this.currentMonth.getFullYear();
    const month = this.currentMonth.getMonth();
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());

    const monthKey = this.getMonthKey(this.currentMonth);
    const monthData = this.hiMoments[monthKey] || {};
    const streakDays = this.getStreakDays();

    // Generate 42 days (6 weeks) with enhanced visualization
    for (let i = 0; i < 42; i++) {
      const date = new Date(startDate);
      date.setDate(startDate.getDate() + i);
      
      const dayElement = document.createElement('div');
      const dayKey = this.getDayKey(date);
      const hiCount = monthData[dayKey] || 0;
      const isCurrentMonth = date.getMonth() === month;
      const isToday = this.isToday(date);
      const hasHiMoments = hiCount > 0;
      const isStreakDay = streakDays.includes(dayKey);
      const hasMultipleHi = hiCount > 1;

      // Enhanced class names for better styling
      let className = 'calendar-day';
      if (!isCurrentMonth) className += ' other-month';
      if (isToday) className += ' today';
      if (hasHiMoments) className += ' has-hi-moments';
      if (isStreakDay) className += ' streak-day';
      if (hasMultipleHi) className += ' multiple-hi-moments';

      dayElement.className = className;
      dayElement.innerHTML = `
        <span class="day-number">${date.getDate()}</span>
        ${hasHiMoments ? `<div class="hi-indicator"><span class="hi-count">${hiCount}</span></div>` : ''}
      `;

      // Enhanced click interaction with premium feedback
      dayElement.addEventListener('click', () => {
        this.selectDay(date, hiCount);
        
        // Tesla-style haptic feedback
        if (window.PremiumUX) {
          window.PremiumUX.triggerHapticFeedback(hasHiMoments ? 'medium' : 'light');
          
          if (hasHiMoments) {
            window.PremiumUX.glow(dayElement, '#4ECDC4');
          }
        }
      });

      // Staggered entrance animation
      dayElement.style.animationDelay = `${i * 10}ms`;
      dayElement.style.animation = 'dayFadeIn 0.4s cubic-bezier(0.25, 0.8, 0.25, 1) forwards';

      daysContainer.appendChild(dayElement);
    }
  }

  getStreakDays() {
    // Calculate which days are part of current streak
    const streakDays = [];
    const today = new Date();
    const streak = this.calculateStreak();
    
    for (let i = 0; i < streak; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() - i);
      const dayKey = this.getDayKey(date);
      
      // Check if this day has Hi moments
      const monthKey = this.getMonthKey(date);
      const monthData = this.hiMoments[monthKey] || {};
      
      if (monthData[dayKey] > 0) {
        streakDays.push(dayKey);
      }
    }
    
    return streakDays;
  }

  selectDay(date, hiCount) {
    if (window.PremiumUX) {
      window.PremiumUX.glow(event.target, '#4ECDC4');
      window.PremiumUX.triggerHapticFeedback('medium');
    }

    // Could add day detail view here later
    console.log(`Selected ${date.toDateString()} with ${hiCount} Hi Moments`);
  }

  // Data management methods
  loadHiMoments() {
    // Load from localStorage for now, will integrate with Supabase later
    const stored = localStorage.getItem('hi-moments-data');
    if (stored) {
      try {
        this.hiMoments = JSON.parse(stored);
      } catch (e) {
        console.warn('Failed to parse Hi Moments data');
        this.hiMoments = {};
      }
    }
  }

  saveHiMoments() {
    localStorage.setItem('hi-moments-data', JSON.stringify(this.hiMoments));
  }

  addHiMoment(date = new Date()) {
    const monthKey = this.getMonthKey(date);
    const dayKey = this.getDayKey(date);
    
    if (!this.hiMoments[monthKey]) {
      this.hiMoments[monthKey] = {};
    }
    
    this.hiMoments[monthKey][dayKey] = (this.hiMoments[monthKey][dayKey] || 0) + 1;
    this.saveHiMoments();
    
    if (this.isOpen) {
      this.updateCalendar();
    }
  }

  // Helper methods
  getMonthKey(date) {
    return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
  }

  getDayKey(date) {
    return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
  }

  getTodayKey() {
    return this.getDayKey(new Date());
  }

  isToday(date) {
    const today = new Date();
    return date.toDateString() === today.toDateString();
  }

  calculateStreak() {
    // Simple streak calculation - can be enhanced
    const today = new Date();
    let streak = 0;
    
    for (let i = 0; i < 365; i++) {
      const checkDate = new Date(today);
      checkDate.setDate(today.getDate() - i);
      
      const monthKey = this.getMonthKey(checkDate);
      const dayKey = this.getDayKey(checkDate);
      
      if (this.hiMoments[monthKey]?.[dayKey] > 0) {
        streak++;
      } else if (i > 0) {
        break; // Streak broken
      }
    }
    
    return streak;
  }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  window.PremiumCalendar = new PremiumCalendar();
});

// Also initialize immediately if DOM is already ready
if (document.readyState !== 'loading') {
  window.PremiumCalendar = new PremiumCalendar();
}

// Export for module usage
if (typeof module !== 'undefined' && module.exports) {
  module.exports = PremiumCalendar;
}